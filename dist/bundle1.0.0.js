(()=>{"use strict";(()=>{const e=JSON.parse('{"batchSize":8,"epochs":100}');document.addEventListener("DOMContentLoaded",(async function(){const t=await async function(e){const t=await fetch("https://storage.googleapis.com/tfjs-tutorials/carsData.json"),a=await t.json();return await async function(e){return e.map((e=>({mpg:e.Miles_per_Gallon,horsepower:e.Horsepower}))).filter((e=>null!=e.mpg&&null!=e.horsepower))}(a)}();!async function(e){const t=e.map((e=>({x:e.horsepower,y:e.mpg})));tfvis.render.scatterplot({name:"Horsepower vs MPG"},{values:t},{xLabel:"Horsepower",yLabel:"MPG",height:300})}(t);const a=function(){let e=tf.sequential();return e.add(tf.layers.dense({inputShape:[1],units:20,useBias:!0})),e.add(tf.layers.dense({units:50,activation:"sigmoid"})),e.add(tf.layers.dense({units:1,useBias:!0})),e}();!function(e){tfvis.show.modelSummary({name:"Model Summary"},e)}(a);const s=function(e){return tf.tidy((()=>{tf.util.shuffle(e);const t=e.map((e=>e.horsepower)),a=e.map((e=>e.mpg)),s=tf.tensor2d(t,[t.length,1]),n=tf.tensor2d(a,[a.length,1]),i=s.max(),o=s.min(),r=n.max(),l=n.min();return{inputs:s.sub(o).div(i.sub(o)),labels:n.sub(l).div(r.sub(l)),inputMax:i,inputMin:o,labelMax:r,labelMin:l}}))}(t),{inputs:n,labels:i}=s;await async function(e,t,a,s){return e.compile({optimizer:tf.train.adam(),loss:tf.losses.meanSquaredError}),await e.fit(t,a,{batchSize:s.batchSize,epochs:s.epochs,shuffle:!0,callbacks:tfvis.show.fitCallbacks({name:"Training Performance"},["loss","mse"],{height:200,callbacks:["onEpochEnd"]})})}(a,n,i,e),function(e,t,a){const{inputMax:s,inputMin:n,labelMin:i,labelMax:o}=a,[r,l]=tf.tidy((()=>{const t=tf.linspace(0,1,100),a=e.predict(t.reshape([100,1])),r=t.mul(s.sub(n)).add(n),l=a.mul(o.sub(i)).add(i);return[r.dataSync(),l.dataSync()]})),c=Array.from(r).map(((e,t)=>({x:e,y:l[t]}))),u=t.map((e=>({x:e.horsepower,y:e.mpg})));tfvis.render.scatterplot({name:"Model Predictions vs Original Data"},{values:[u,c],series:["original","predicted"]},{xLabel:"Horsepower",yLabel:"MPG",height:300})}(a,t,s)}))})()})();